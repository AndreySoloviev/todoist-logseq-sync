import '@logseq/libs'
import type { TodoistTask } from './types'

export async function addTasksToTodayJournal(tasks: TodoistTask[]): Promise<void> {
	console.log(`[Logseq Helper] –î–æ–±–∞–≤–ª—è–µ–º ${tasks.length} –∑–∞–¥–∞—á –≤ –Ω–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –∂—É—Ä–Ω–∞–ª–∞...`)
	logseq.UI.showMsg(`üìù –î–æ–±–∞–≤–ª—è–µ–º ${tasks.length} –∑–∞–¥–∞—á –≤ –∂—É—Ä–Ω–∞–ª`, 'info', { timeout: 5000 })
	
	if (tasks.length === 0) {
		logseq.UI.showMsg(`‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è`, 'info', { timeout: 5000 })
		return
	}
	
	try {
		// –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
		const today = new Date().toISOString().slice(0, 10)
		console.log(`[Logseq Helper] –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: ${today}`)
		logseq.UI.showMsg(`üìÖ –†–∞–±–æ—Ç–∞–µ–º —Å –¥–∞—Ç–æ–π: ${today}`, 'info', { timeout: 5000 })
		
		let addedCount = 0
		
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–∞–≤–µ—Ä—Ö—É
		for (let i = tasks.length - 1; i >= 0; i--) {
			const task = tasks[i]
			
			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É: —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç + –¥–∞—Ç–∞ + –ª–µ–π–±–ª—ã + #task
			const due = task.due?.string || task.due?.date || ''
			const labels = (task.labels && task.labels.length) ? ` #[${task.labels.join('] #[')}]` : ''
			const taskContent = `${task.content}${due ? ` ‚è∞ ${due}` : ''}${labels} #task`.trim()
			
			console.log(`[Logseq Helper] –ó–∞–¥–∞—á–∞ ${i + 1}/${tasks.length}: ${taskContent}`)
			logseq.UI.showMsg(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º: ${task.content}`, 'info', { timeout: 4000 })
			
			let taskBlock = null
			
			// –°–ø–æ—Å–æ–± 1: –ü—Ä–æ–±—É–µ–º prependBlockInPage
			try {
				console.log(`[Logseq Helper] –°–ø–æ—Å–æ–± 1: prependBlockInPage –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${today}"`)
				taskBlock = await logseq.Editor.prependBlockInPage(today, taskContent)
				if (taskBlock) {
					console.log(`[Logseq Helper] ‚úÖ prependBlockInPage —Å—Ä–∞–±–æ—Ç–∞–ª, UUID: ${taskBlock.uuid}`)
				}
			} catch (error1) {
				console.log(`[Logseq Helper] ‚ùå prependBlockInPage –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error1)
			}
			
			// –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º appendBlockInPage
			if (!taskBlock) {
				try {
					console.log(`[Logseq Helper] –°–ø–æ—Å–æ–± 2: appendBlockInPage –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${today}"`)
					taskBlock = await logseq.Editor.appendBlockInPage(today, taskContent)
					if (taskBlock) {
						console.log(`[Logseq Helper] ‚úÖ appendBlockInPage —Å—Ä–∞–±–æ—Ç–∞–ª, UUID: ${taskBlock.uuid}`)
					}
				} catch (error2) {
					console.log(`[Logseq Helper] ‚ùå appendBlockInPage –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error2)
				}
			}
			
			// –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —è–≤–Ω–æ –∏ insertBlock
			if (!taskBlock) {
				try {
					console.log(`[Logseq Helper] –°–ø–æ—Å–æ–± 3: –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É "${today}" –¥–ª—è insertBlock`)
					let page = await logseq.Editor.getPage(today)
					if (!page) {
						console.log(`[Logseq Helper] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é`)
						page = await logseq.Editor.createPage(today, {}, { journal: true, createFirstBlock: false })
					}
					if (page) {
						console.log(`[Logseq Helper] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞: ${page.name}, UUID: ${page.uuid}`)
						taskBlock = await logseq.Editor.insertBlock(page.uuid, taskContent, { sibling: false, before: true })
						if (taskBlock) {
							console.log(`[Logseq Helper] ‚úÖ insertBlock —Å—Ä–∞–±–æ—Ç–∞–ª, UUID: ${taskBlock.uuid}`)
						}
					}
				} catch (error3) {
					console.log(`[Logseq Helper] ‚ùå insertBlock –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error3)
				}
			}
			
			if (taskBlock) {
				console.log(`[Logseq Helper] –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, UUID: ${taskBlock.uuid}`)
				addedCount++
				
				if (task.description) {
					// –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –±–ª–æ–∫
					console.log(`[Logseq Helper] –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ: ${task.description}`)
					logseq.UI.showMsg(`üìù –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ`, 'info', { timeout: 3000 })
					try {
						await logseq.Editor.insertBlock(taskBlock.uuid, task.description, { sibling: false })
						console.log(`[Logseq Helper] –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ`)
					} catch (descError) {
						console.error(`[Logseq Helper] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:`, descError)
						logseq.UI.showMsg(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ`, 'warning', { timeout: 6000 })
					}
				}
			} else {
				console.error(`[Logseq Helper] –í—Å–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è –∑–∞–¥–∞—á–∏: ${task.content}`)
				logseq.UI.showMsg(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: ${task.content}`, 'error', { timeout: 8000 })
			}
		}
		
		console.log(`[Logseq Helper] –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –∏–∑ ${tasks.length} –∑–∞–¥–∞—á`)
		if (addedCount > 0) {
			logseq.UI.showMsg(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –∑–∞–¥–∞—á –≤ –Ω–∞—á–∞–ª–æ –∂—É—Ä–Ω–∞–ª–∞`, 'success', { timeout: 6000 })
		} else {
			logseq.UI.showMsg(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏`, 'error', { timeout: 10000 })
		}
		
	} catch (error) {
		console.error('[Logseq Helper] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', error)
		logseq.UI.showMsg(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${String(error)}`, 'error', { timeout: 10000 })
		throw error
	}
}


