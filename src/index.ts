import '@logseq/libs'
import { defaultSettings, type PluginSettings } from './types'
import { TodoistClient } from './todoist'
import { addTasksToTodayJournal } from './logseq'

let timerId: number | null = null

async function syncOnce(settings: PluginSettings): Promise<void> {
	console.log('[Todoist Sync] –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...')
	
	if (!settings.todoistApiToken) {
		const message = '–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω Todoist API. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞.'
		console.warn('[Todoist Sync]', message)
		logseq.UI.showMsg(message, 'warning', { timeout: 8000 })
		return
	}
	
	try {
		console.log('[Todoist Sync] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Todoist API...')
		const todoist = new TodoistClient(settings.todoistApiToken)
		let tasks = await todoist.getInboxTasks(settings.inboxProjectId)
		console.log(`[Todoist Sync] –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –≤ Inbox: ${tasks.length}`)
		
		// –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
		const syncedIds = settings.syncedTaskIds || []
		const newTasks = tasks.filter(task => !syncedIds.includes(task.id))
		
		if (newTasks.length === 0) {
			logseq.UI.showMsg('üì• –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ Todoist Inbox', 'info', { timeout: 5000 })
			console.log(`[Todoist Sync] –í—Å–µ ${tasks.length} –∑–∞–¥–∞—á —É–∂–µ –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–Ω–µ–µ`)
			return
		}
		
		console.log(`[Todoist Sync] –ù–æ–≤—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${newTasks.length}`)
		logseq.UI.showMsg(`üì• –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: ${newTasks.length}`, 'info', { timeout: 4000 })

		console.log('[Todoist Sync] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∂—É—Ä–Ω–∞–ª...')
		await addTasksToTodayJournal(newTasks)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
		const updatedSyncedIds = [...syncedIds, ...newTasks.map(t => t.id)]
		
		// –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Todoist
		if (settings.deleteAfterImport) {
			console.log('[Todoist Sync] –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ Todoist...')
			logseq.UI.showMsg('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Todoist...', 'info', { timeout: 3000 })
			const results = await Promise.allSettled(newTasks.map(t => todoist.deleteTask(t.id)))
			const errors = results.filter(r => r.status === 'rejected')
			if (errors.length > 0) {
				console.warn('[Todoist Sync] –û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', errors)
			}
			// –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ Todoist, –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
			await logseq.updateSettings({ 
				syncedTaskIds: [],
				lastSyncTime: new Date().toISOString()
			})
		} else {
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª—è–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–º
			await logseq.updateSettings({ 
				syncedTaskIds: updatedSyncedIds,
				lastSyncTime: new Date().toISOString()
			})
			console.log(`[Todoist Sync] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${updatedSyncedIds.length} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID`)
		}
		
		const successMessage = settings.deleteAfterImport 
			? `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ ${newTasks.length} –∑–∞–¥–∞—á –∏–∑ Todoist`
			: `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${newTasks.length} –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)`
		console.log('[Todoist Sync]', successMessage)
		logseq.UI.showMsg(successMessage, 'success', { timeout: 8000 })
	} catch (e) {
		const errorMessage = '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ' + (e instanceof Error ? e.message : String(e))
		console.error('[Todoist Sync]', errorMessage, e)
		logseq.UI.showMsg(errorMessage, 'error', { timeout: 12000 })
	}
}

function startScheduler(settings: PluginSettings): void {
	stopScheduler()
	const intervalMs = Math.max(1, settings.intervalMinutes) * 60_000
	timerId = window.setInterval(() => {
		void syncOnce(settings)
	}, intervalMs)
	void syncOnce(settings)
}

function stopScheduler(): void {
	if (timerId != null) {
		clearInterval(timerId)
		timerId = null
	}
}

function registerUI() {
	// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ toolbar, —á—Ç–æ–±—ã –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–µ—â–∞–ª–∏—Å—å
	logseq.provideStyle(`
		.ui-items-container .list-wrap {
			max-width: 114px !important;
		}
	`)

	logseq.App.registerUIItem('toolbar', {
		key: 'todoist-sync-now',
		template: `
			<a data-on-click="todoistSyncNow" 
			   title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å Todoist Inbox" 
			   class="button">
				<i class="ti ti-checkbox"></i>
			</a>
		`,
	})
}

function onSettingsChanged(settings: PluginSettings) {
	startScheduler(settings)
}

logseq.useSettingsSchema([
	{ key: 'todoistApiToken', title: 'Todoist API Token', description: '–õ–∏—á–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Todoist App Console', type: 'string', default: defaultSettings.todoistApiToken },
	{ key: 'inboxProjectId', title: 'Inbox Project ID', description: '–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –ø—É—Å—Ç–æ, –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', type: 'string', default: defaultSettings.inboxProjectId ?? '' },
	{ key: 'deleteAfterImport', title: '–£–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ Todoist', description: '–£–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ Todoist –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –≤ LogSeq', type: 'boolean', default: defaultSettings.deleteAfterImport },
	{ key: 'intervalMinutes', title: '–ò–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω)', description: '–ö–∞–∫ —á–∞—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å', type: 'number', default: defaultSettings.intervalMinutes },
])

logseq.ready(async () => {
	registerUI()
	logseq.App.onSettingsChanged((newSettings) => onSettingsChanged(newSettings as unknown as PluginSettings))
	const settings = (logseq.settings ?? defaultSettings) as PluginSettings
	startScheduler(settings)
	logseq.provideModel({
		todoistSyncNow: async () => {
			console.log('[Todoist Sync] –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...')
			logseq.UI.showMsg('üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...', 'info', { timeout: 5000 })
			try {
				await syncOnce((logseq.settings ?? defaultSettings) as PluginSettings)
			} catch (error) {
				console.error('[Todoist Sync] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error)
				logseq.UI.showMsg('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'error', { timeout: 10000 })
			}
		},
		resetSyncHistory: async () => {
			console.log('[Todoist Sync] –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...')
			await logseq.updateSettings({ 
				syncedTaskIds: [],
				lastSyncTime: undefined
			})
			logseq.UI.showMsg('üîÑ –ò—Å—Ç–æ—Ä–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω–∞', 'success', { timeout: 5000 })
		},
	})
}).catch(console.error)

export {}


